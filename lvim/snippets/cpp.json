{
  "General cpp coding template": {
    "prefix": "cpp",
    "body": [
      "#include <bits/stdc++.h>",
      "",
      "using namespace std;",
      "",
      "#define all(cont) cont.begin(), cont.end()",
      "#define rall(cont) cont.rend(), cont.rbegin()",
      "#define PB push_back",
      "#define PI 3.1415926535897932384626433832795",
      "#define endl \"\\n\"",
      "typedef long int l;",
      "typedef unsigned long int ul;",
      "typedef long long int ll;",
      "typedef unsigned long long int  ull;",
      "",
      "void solve() {",
      "",
      "}",
      "",
      "int main() {",
      "    ios_base::sync_with_stdio(false);",
      "    cin.tie(NULL);",
      "    int t;",
      "    cin >> t;",
      "    while (t--) {",
      "        solve();",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": "General cpp coding template"
  },
  "Google cpp coding template": {
    "prefix": "cpp_g",
    "body": [
      "#include <bits/stdc++.h>",
      "",
      "using namespace std;",
      "",
      "#define all(cont) cont.begin(), cont.end()",
      "#define rall(cont) cont.rend(), cont.rbegin()",
      "#define PB push_back",
      "#define PI 3.1415926535897932384626433832795",
      "#define endl \"\\n\"",
      "typedef long int l;",
      "typedef unsigned long int ul;",
      "typedef long long int ll;",
      "typedef unsigned long long int  ull;",
      "",
      "void print(ll test, ll value) {",
      "    cout << \"Case #\" << test << \": \" << value << endl;",
      "}",
      "void solve() {",
      "",
      "}",
      "",
      "int main() {",
      "    ios_base::sync_with_stdio(false);",
      "    cin.tie(NULL);",
      "    int t;",
      "    cin >> t;",
      "    while(t--) {",
      "       solve();",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": "Google cpp coding template"
  },
  "Template for Grapg code": {
    "prefix": "graph",
    "body": [
      "vector<vector<pii>> graph;",
      "",
      "void addEdge(int u, int v, bool bidir = true, int wt = 0) {",
      "    graph[u].push_back(make_pair(v, wt));",
      "    if(bidir) {",
      "        graph[v].push_back(make_pair(u, wt));",
      "    }",
      "}",
      "",
      "void display() {",
      "    for(auto i : graph) {",
      "        // i->vector of pair",
      "        if(i.size() == 0) {",
      "            cout<<\"empty\";",
      "        }",
      "        for(auto j : i) {",
      "            // j is a pair",
      "            cout<<\"{\"<<j.first<<\",\"<<j.second<<\"} \";",
      "        }",
      "        cout<<\"\\n\";",
      "    }",
      "}",
      "",
      "void bfs(int src, int vertices) {",
      "    queue<int> qu;",
      "    vector<bool> visited(vertices, false);",
      " ",
      "    qu.push(src);",
      "    visited[src] = true;",
      " ",
      "    while(not qu.empty()) {",
      "        int currentNode = qu.front();",
      "        qu.pop();",
      "        cout<<currentNode<<\" \";",
      "        for(auto neighbour : graph[currentNode]) {",
      "            // neighbour is a pair",
      "            if(not visited[neighbour.first]) {",
      "                qu.push(neighbour.first);",
      "                visited[neighbour.first] = true;",
      "            }",
      "        }",
      "    }",
      "}"
    ],
    "description": "Template for Grapg code"
  },
  "Snippet for Leetcode Questions": {
    "prefix": "cpp_l",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Solution {",
      "public:",
      "};",
      "",
      "int main() {",
      "    ios_base::sync_with_stdio(false);",
      "    cin.tie(NULL);",
      "    Solution s",
      "    return 0;",
      "}"
    ],
    "description": "Snippet for Leetcode Questions"
  },
  "Sieve of Eratosthenes": {
    "prefix": "sieve",
    "body": [
      "vector<bool> prime(MAX, true);",
      "",
      "void sieve() {",
      "    for (int p = 2; p * p <= MAX; p++) {",
      "        if (prime[p] == true) {",
      "            for (int i = p * p; i <= MAX; i += p) {",
      "                prime[i] = false;",
      "            }",
      "        }",
      "    }",
      "}"
    ],
    "description": "Sieve of Eratosthenes"
  },
  "Vector of long long integers": {
    "prefix": "vi",
    "body": [
      "vector<ll>"
    ],
    "description": "Vector of long long integers"
  },
  "Vector of strings": {
    "prefix": "vs",
    "body": [
      "vector<string>"
    ],
    "description": "Vector of strings"
  },
  "2D vector of long long integers": {
    "prefix": "vii",
    "body": [
      "vector<vector<ll>>"
    ],
    "description": "2D vector of long long integers"
  },
  "Pair of long long integers": {
    "prefix": "pii",
    "body": [
      "pair<ll, ll>"
    ],
    "description": "Pair of long long integers"
  },
  "Unordered map of long long integers": {
    "prefix": "mii",
    "body": [
      "unordered_map<ll, ll>"
    ],
    "description": "Unordered map of long long integers"
  },
  "Map of long long integers": {
    "prefix": "omii",
    "body": [
      "map<ll, ll>"
    ],
    "description": "Map of long long integers"
  },
  "Unordered set of long long integers": {
    "prefix": "si",
    "body": [
      "unordered_set<ll>"
    ],
    "description": "Unordered set of long long integers"
  },
  "Map of long long integers": {
    "prefix": "osi",
    "body": [
      "set<ll, ll>"
    ],
    "description": "Set of long long integers"
  },
  "Increasing for loop": {
    "prefix": "foi",
    "body": [
      "for(ll i=0; i<n; i++) {",
      "",
      "}"
    ],
    "description": "Increasing for loop"
  },
  "Decreasing for loop": {
    "prefix": "fod",
    "body": [
      "for(ll i=n-1; i>=0; i--) {",
      "",
      "}"
    ],
    "description": "Decreasing for loop"
  },
  "Mod": {
    "prefix": "mod",
    "body": [
      "const ll MOD = 1000000007"
    ],
    "description": "Modulo 10^9 + 7"
  }
}
